package studiopackbuilder

import (
	"io/ioutil"
	"os"
	"path/filepath"

	"github.com/google/uuid"
	"github.com/olup/lunii-cli/pkg/lunii"
	"gopkg.in/yaml.v3"
)

func buildStudioPack(directoryPath string, outputPath string) (*lunii.StudioPack, error) {
	var metadata lunii.Metadata
	metadataPath := filepath.Join(directoryPath, "metadata.yaml")
	metadataBytes, err := os.ReadFile(metadataPath)
	if err != nil {
		return nil, err
	}

	err = yaml.Unmarshal(metadataBytes, metadata)
	if err != nil {
		return nil, err
	}

	tempOutputPath := filepath.Join(os.TempDir(), "build", metadata.Ref)
	tempOutputAssetPath := filepath.Join(tempOutputPath, "assets")

	err = os.MkdirAll(tempOutputPath, 0700)
	err = os.MkdirAll(tempOutputAssetPath, 0700)
	if err != nil {
		return nil, err
	}

	var nodeList []lunii.StageNode

	// start node grabbing
	GetTitleNode(directoryPath)

	// todo complete pack
	return &lunii.StudioPack{
		Uuid:        metadata.Uuid,
		Title:       metadata.Title,
		Description: metadata.Description,

		StageNodes: nodeList,
	}, nil
}

func copy(from string, to string) error {
	input, err := ioutil.ReadFile(from)
	if err != nil {
		return err
	}

	err = ioutil.WriteFile(to, input, 0777)
	if err != nil {
		return err
	}
	return nil
}
